/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hu.bme.mit.gitlens;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-04")
public class GitLensService {

  public interface Iface {

    public ServerResponse answerAccess1(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String result) throws org.apache.thrift.TException;

    public ServerResponse answerPreGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command) throws org.apache.thrift.TException;

    public ServerResponse answerAccess2(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String ref, java.lang.String result, java.lang.String oldCommit, java.lang.String newCommit) throws org.apache.thrift.TException;

    public ServerResponse answerPostGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void answerAccess1(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String result, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException;

    public void answerPreGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException;

    public void answerAccess2(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String ref, java.lang.String result, java.lang.String oldCommit, java.lang.String newCommit, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException;

    public void answerPostGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ServerResponse answerAccess1(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String result) throws org.apache.thrift.TException
    {
      send_answerAccess1(repoName, userName, mode, result);
      return recv_answerAccess1();
    }

    public void send_answerAccess1(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String result) throws org.apache.thrift.TException
    {
      answerAccess1_args args = new answerAccess1_args();
      args.setRepoName(repoName);
      args.setUserName(userName);
      args.setMode(mode);
      args.setResult(result);
      sendBase("answerAccess1", args);
    }

    public ServerResponse recv_answerAccess1() throws org.apache.thrift.TException
    {
      answerAccess1_result result = new answerAccess1_result();
      receiveBase(result, "answerAccess1");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "answerAccess1 failed: unknown result");
    }

    public ServerResponse answerPreGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command) throws org.apache.thrift.TException
    {
      send_answerPreGit(repoName, userName, mode, command);
      return recv_answerPreGit();
    }

    public void send_answerPreGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command) throws org.apache.thrift.TException
    {
      answerPreGit_args args = new answerPreGit_args();
      args.setRepoName(repoName);
      args.setUserName(userName);
      args.setMode(mode);
      args.setCommand(command);
      sendBase("answerPreGit", args);
    }

    public ServerResponse recv_answerPreGit() throws org.apache.thrift.TException
    {
      answerPreGit_result result = new answerPreGit_result();
      receiveBase(result, "answerPreGit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "answerPreGit failed: unknown result");
    }

    public ServerResponse answerAccess2(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String ref, java.lang.String result, java.lang.String oldCommit, java.lang.String newCommit) throws org.apache.thrift.TException
    {
      send_answerAccess2(repoName, userName, mode, ref, result, oldCommit, newCommit);
      return recv_answerAccess2();
    }

    public void send_answerAccess2(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String ref, java.lang.String result, java.lang.String oldCommit, java.lang.String newCommit) throws org.apache.thrift.TException
    {
      answerAccess2_args args = new answerAccess2_args();
      args.setRepoName(repoName);
      args.setUserName(userName);
      args.setMode(mode);
      args.setRef(ref);
      args.setResult(result);
      args.setOldCommit(oldCommit);
      args.setNewCommit(newCommit);
      sendBase("answerAccess2", args);
    }

    public ServerResponse recv_answerAccess2() throws org.apache.thrift.TException
    {
      answerAccess2_result result = new answerAccess2_result();
      receiveBase(result, "answerAccess2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "answerAccess2 failed: unknown result");
    }

    public ServerResponse answerPostGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command) throws org.apache.thrift.TException
    {
      send_answerPostGit(repoName, userName, mode, command);
      return recv_answerPostGit();
    }

    public void send_answerPostGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command) throws org.apache.thrift.TException
    {
      answerPostGit_args args = new answerPostGit_args();
      args.setRepoName(repoName);
      args.setUserName(userName);
      args.setMode(mode);
      args.setCommand(command);
      sendBase("answerPostGit", args);
    }

    public ServerResponse recv_answerPostGit() throws org.apache.thrift.TException
    {
      answerPostGit_result result = new answerPostGit_result();
      receiveBase(result, "answerPostGit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "answerPostGit failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void answerAccess1(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String result, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      answerAccess1_call method_call = new answerAccess1_call(repoName, userName, mode, result, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class answerAccess1_call extends org.apache.thrift.async.TAsyncMethodCall<ServerResponse> {
      private java.lang.String repoName;
      private java.lang.String userName;
      private Modes mode;
      private java.lang.String result;
      public answerAccess1_call(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String result, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoName = repoName;
        this.userName = userName;
        this.mode = mode;
        this.result = result;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("answerAccess1", org.apache.thrift.protocol.TMessageType.CALL, 0));
        answerAccess1_args args = new answerAccess1_args();
        args.setRepoName(repoName);
        args.setUserName(userName);
        args.setMode(mode);
        args.setResult(result);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ServerResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_answerAccess1();
      }
    }

    public void answerPreGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      answerPreGit_call method_call = new answerPreGit_call(repoName, userName, mode, command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class answerPreGit_call extends org.apache.thrift.async.TAsyncMethodCall<ServerResponse> {
      private java.lang.String repoName;
      private java.lang.String userName;
      private Modes mode;
      private Modes command;
      public answerPreGit_call(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoName = repoName;
        this.userName = userName;
        this.mode = mode;
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("answerPreGit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        answerPreGit_args args = new answerPreGit_args();
        args.setRepoName(repoName);
        args.setUserName(userName);
        args.setMode(mode);
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ServerResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_answerPreGit();
      }
    }

    public void answerAccess2(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String ref, java.lang.String result, java.lang.String oldCommit, java.lang.String newCommit, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      answerAccess2_call method_call = new answerAccess2_call(repoName, userName, mode, ref, result, oldCommit, newCommit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class answerAccess2_call extends org.apache.thrift.async.TAsyncMethodCall<ServerResponse> {
      private java.lang.String repoName;
      private java.lang.String userName;
      private Modes mode;
      private java.lang.String ref;
      private java.lang.String result;
      private java.lang.String oldCommit;
      private java.lang.String newCommit;
      public answerAccess2_call(java.lang.String repoName, java.lang.String userName, Modes mode, java.lang.String ref, java.lang.String result, java.lang.String oldCommit, java.lang.String newCommit, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoName = repoName;
        this.userName = userName;
        this.mode = mode;
        this.ref = ref;
        this.result = result;
        this.oldCommit = oldCommit;
        this.newCommit = newCommit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("answerAccess2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        answerAccess2_args args = new answerAccess2_args();
        args.setRepoName(repoName);
        args.setUserName(userName);
        args.setMode(mode);
        args.setRef(ref);
        args.setResult(result);
        args.setOldCommit(oldCommit);
        args.setNewCommit(newCommit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ServerResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_answerAccess2();
      }
    }

    public void answerPostGit(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      answerPostGit_call method_call = new answerPostGit_call(repoName, userName, mode, command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class answerPostGit_call extends org.apache.thrift.async.TAsyncMethodCall<ServerResponse> {
      private java.lang.String repoName;
      private java.lang.String userName;
      private Modes mode;
      private Modes command;
      public answerPostGit_call(java.lang.String repoName, java.lang.String userName, Modes mode, Modes command, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoName = repoName;
        this.userName = userName;
        this.mode = mode;
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("answerPostGit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        answerPostGit_args args = new answerPostGit_args();
        args.setRepoName(repoName);
        args.setUserName(userName);
        args.setMode(mode);
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ServerResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_answerPostGit();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("answerAccess1", new answerAccess1());
      processMap.put("answerPreGit", new answerPreGit());
      processMap.put("answerAccess2", new answerAccess2());
      processMap.put("answerPostGit", new answerPostGit());
      return processMap;
    }

    public static class answerAccess1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, answerAccess1_args> {
      public answerAccess1() {
        super("answerAccess1");
      }

      public answerAccess1_args getEmptyArgsInstance() {
        return new answerAccess1_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public answerAccess1_result getResult(I iface, answerAccess1_args args) throws org.apache.thrift.TException {
        answerAccess1_result result = new answerAccess1_result();
        result.success = iface.answerAccess1(args.repoName, args.userName, args.mode, args.result);
        return result;
      }
    }

    public static class answerPreGit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, answerPreGit_args> {
      public answerPreGit() {
        super("answerPreGit");
      }

      public answerPreGit_args getEmptyArgsInstance() {
        return new answerPreGit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public answerPreGit_result getResult(I iface, answerPreGit_args args) throws org.apache.thrift.TException {
        answerPreGit_result result = new answerPreGit_result();
        result.success = iface.answerPreGit(args.repoName, args.userName, args.mode, args.command);
        return result;
      }
    }

    public static class answerAccess2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, answerAccess2_args> {
      public answerAccess2() {
        super("answerAccess2");
      }

      public answerAccess2_args getEmptyArgsInstance() {
        return new answerAccess2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public answerAccess2_result getResult(I iface, answerAccess2_args args) throws org.apache.thrift.TException {
        answerAccess2_result result = new answerAccess2_result();
        result.success = iface.answerAccess2(args.repoName, args.userName, args.mode, args.ref, args.result, args.oldCommit, args.newCommit);
        return result;
      }
    }

    public static class answerPostGit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, answerPostGit_args> {
      public answerPostGit() {
        super("answerPostGit");
      }

      public answerPostGit_args getEmptyArgsInstance() {
        return new answerPostGit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public answerPostGit_result getResult(I iface, answerPostGit_args args) throws org.apache.thrift.TException {
        answerPostGit_result result = new answerPostGit_result();
        result.success = iface.answerPostGit(args.repoName, args.userName, args.mode, args.command);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("answerAccess1", new answerAccess1());
      processMap.put("answerPreGit", new answerPreGit());
      processMap.put("answerAccess2", new answerAccess2());
      processMap.put("answerPostGit", new answerPostGit());
      return processMap;
    }

    public static class answerAccess1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, answerAccess1_args, ServerResponse> {
      public answerAccess1() {
        super("answerAccess1");
      }

      public answerAccess1_args getEmptyArgsInstance() {
        return new answerAccess1_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ServerResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ServerResponse>() { 
          public void onComplete(ServerResponse o) {
            answerAccess1_result result = new answerAccess1_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            answerAccess1_result result = new answerAccess1_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, answerAccess1_args args, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
        iface.answerAccess1(args.repoName, args.userName, args.mode, args.result,resultHandler);
      }
    }

    public static class answerPreGit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, answerPreGit_args, ServerResponse> {
      public answerPreGit() {
        super("answerPreGit");
      }

      public answerPreGit_args getEmptyArgsInstance() {
        return new answerPreGit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ServerResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ServerResponse>() { 
          public void onComplete(ServerResponse o) {
            answerPreGit_result result = new answerPreGit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            answerPreGit_result result = new answerPreGit_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, answerPreGit_args args, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
        iface.answerPreGit(args.repoName, args.userName, args.mode, args.command,resultHandler);
      }
    }

    public static class answerAccess2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, answerAccess2_args, ServerResponse> {
      public answerAccess2() {
        super("answerAccess2");
      }

      public answerAccess2_args getEmptyArgsInstance() {
        return new answerAccess2_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ServerResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ServerResponse>() { 
          public void onComplete(ServerResponse o) {
            answerAccess2_result result = new answerAccess2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            answerAccess2_result result = new answerAccess2_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, answerAccess2_args args, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
        iface.answerAccess2(args.repoName, args.userName, args.mode, args.ref, args.result, args.oldCommit, args.newCommit,resultHandler);
      }
    }

    public static class answerPostGit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, answerPostGit_args, ServerResponse> {
      public answerPostGit() {
        super("answerPostGit");
      }

      public answerPostGit_args getEmptyArgsInstance() {
        return new answerPostGit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ServerResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ServerResponse>() { 
          public void onComplete(ServerResponse o) {
            answerPostGit_result result = new answerPostGit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            answerPostGit_result result = new answerPostGit_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, answerPostGit_args args, org.apache.thrift.async.AsyncMethodCallback<ServerResponse> resultHandler) throws org.apache.thrift.TException {
        iface.answerPostGit(args.repoName, args.userName, args.mode, args.command,resultHandler);
      }
    }

  }

  public static class answerAccess1_args implements org.apache.thrift.TBase<answerAccess1_args, answerAccess1_args._Fields>, java.io.Serializable, Cloneable, Comparable<answerAccess1_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerAccess1_args");

    private static final org.apache.thrift.protocol.TField REPO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repoName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerAccess1_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerAccess1_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String repoName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
    /**
     * 
     * @see Modes
     */
    public @org.apache.thrift.annotation.Nullable Modes mode; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String result; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_NAME((short)1, "repoName"),
      USER_NAME((short)2, "userName"),
      /**
       * 
       * @see Modes
       */
      MODE((short)3, "mode"),
      RESULT((short)4, "result");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_NAME
            return REPO_NAME;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // MODE
            return MODE;
          case 4: // RESULT
            return RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_NAME, new org.apache.thrift.meta_data.FieldMetaData("repoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Modes.class)));
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerAccess1_args.class, metaDataMap);
    }

    public answerAccess1_args() {
    }

    public answerAccess1_args(
      java.lang.String repoName,
      java.lang.String userName,
      Modes mode,
      java.lang.String result)
    {
      this();
      this.repoName = repoName;
      this.userName = userName;
      this.mode = mode;
      this.result = result;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerAccess1_args(answerAccess1_args other) {
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      if (other.isSetResult()) {
        this.result = other.result;
      }
    }

    public answerAccess1_args deepCopy() {
      return new answerAccess1_args(this);
    }

    @Override
    public void clear() {
      this.repoName = null;
      this.userName = null;
      this.mode = null;
      this.result = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRepoName() {
      return this.repoName;
    }

    public answerAccess1_args setRepoName(@org.apache.thrift.annotation.Nullable java.lang.String repoName) {
      this.repoName = repoName;
      return this;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserName() {
      return this.userName;
    }

    public answerAccess1_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    /**
     * 
     * @see Modes
     */
    @org.apache.thrift.annotation.Nullable
    public Modes getMode() {
      return this.mode;
    }

    /**
     * 
     * @see Modes
     */
    public answerAccess1_args setMode(@org.apache.thrift.annotation.Nullable Modes mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getResult() {
      return this.result;
    }

    public answerAccess1_args setResult(@org.apache.thrift.annotation.Nullable java.lang.String result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REPO_NAME:
        if (value == null) {
          unsetRepoName();
        } else {
          setRepoName((java.lang.String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Modes)value);
        }
        break;

      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_NAME:
        return getRepoName();

      case USER_NAME:
        return getUserName();

      case MODE:
        return getMode();

      case RESULT:
        return getResult();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REPO_NAME:
        return isSetRepoName();
      case USER_NAME:
        return isSetUserName();
      case MODE:
        return isSetMode();
      case RESULT:
        return isSetResult();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerAccess1_args)
        return this.equals((answerAccess1_args)that);
      return false;
    }

    public boolean equals(answerAccess1_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRepoName()) ? 131071 : 524287);
      if (isSetRepoName())
        hashCode = hashCode * 8191 + repoName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
      if (isSetMode())
        hashCode = hashCode * 8191 + mode.getValue();

      hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
      if (isSetResult())
        hashCode = hashCode * 8191 + result.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerAccess1_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRepoName()).compareTo(other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerAccess1_args(");
      boolean first = true;

      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerAccess1_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess1_argsStandardScheme getScheme() {
        return new answerAccess1_argsStandardScheme();
      }
    }

    private static class answerAccess1_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerAccess1_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerAccess1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoName = iprot.readString();
                struct.setRepoNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.result = iprot.readString();
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerAccess1_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoName != null) {
          oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
          oprot.writeString(struct.repoName);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerAccess1_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess1_argsTupleScheme getScheme() {
        return new answerAccess1_argsTupleScheme();
      }
    }

    private static class answerAccess1_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerAccess1_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerAccess1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRepoName()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        if (struct.isSetResult()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRepoName()) {
          oprot.writeString(struct.repoName);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
        if (struct.isSetResult()) {
          oprot.writeString(struct.result);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerAccess1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.repoName = iprot.readString();
          struct.setRepoNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.result = iprot.readString();
          struct.setResultIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerAccess1_result implements org.apache.thrift.TBase<answerAccess1_result, answerAccess1_result._Fields>, java.io.Serializable, Cloneable, Comparable<answerAccess1_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerAccess1_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerAccess1_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerAccess1_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ServerResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerAccess1_result.class, metaDataMap);
    }

    public answerAccess1_result() {
    }

    public answerAccess1_result(
      ServerResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerAccess1_result(answerAccess1_result other) {
      if (other.isSetSuccess()) {
        this.success = new ServerResponse(other.success);
      }
    }

    public answerAccess1_result deepCopy() {
      return new answerAccess1_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ServerResponse getSuccess() {
      return this.success;
    }

    public answerAccess1_result setSuccess(@org.apache.thrift.annotation.Nullable ServerResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ServerResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerAccess1_result)
        return this.equals((answerAccess1_result)that);
      return false;
    }

    public boolean equals(answerAccess1_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerAccess1_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerAccess1_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerAccess1_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess1_resultStandardScheme getScheme() {
        return new answerAccess1_resultStandardScheme();
      }
    }

    private static class answerAccess1_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerAccess1_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerAccess1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ServerResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerAccess1_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerAccess1_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess1_resultTupleScheme getScheme() {
        return new answerAccess1_resultTupleScheme();
      }
    }

    private static class answerAccess1_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerAccess1_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerAccess1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerAccess1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ServerResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerPreGit_args implements org.apache.thrift.TBase<answerPreGit_args, answerPreGit_args._Fields>, java.io.Serializable, Cloneable, Comparable<answerPreGit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerPreGit_args");

    private static final org.apache.thrift.protocol.TField REPO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repoName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerPreGit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerPreGit_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String repoName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
    /**
     * 
     * @see Modes
     */
    public @org.apache.thrift.annotation.Nullable Modes mode; // required
    /**
     * 
     * @see Modes
     */
    public @org.apache.thrift.annotation.Nullable Modes command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_NAME((short)1, "repoName"),
      USER_NAME((short)2, "userName"),
      /**
       * 
       * @see Modes
       */
      MODE((short)3, "mode"),
      /**
       * 
       * @see Modes
       */
      COMMAND((short)4, "command");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_NAME
            return REPO_NAME;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // MODE
            return MODE;
          case 4: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_NAME, new org.apache.thrift.meta_data.FieldMetaData("repoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Modes.class)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Modes.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerPreGit_args.class, metaDataMap);
    }

    public answerPreGit_args() {
    }

    public answerPreGit_args(
      java.lang.String repoName,
      java.lang.String userName,
      Modes mode,
      Modes command)
    {
      this();
      this.repoName = repoName;
      this.userName = userName;
      this.mode = mode;
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerPreGit_args(answerPreGit_args other) {
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public answerPreGit_args deepCopy() {
      return new answerPreGit_args(this);
    }

    @Override
    public void clear() {
      this.repoName = null;
      this.userName = null;
      this.mode = null;
      this.command = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRepoName() {
      return this.repoName;
    }

    public answerPreGit_args setRepoName(@org.apache.thrift.annotation.Nullable java.lang.String repoName) {
      this.repoName = repoName;
      return this;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserName() {
      return this.userName;
    }

    public answerPreGit_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    /**
     * 
     * @see Modes
     */
    @org.apache.thrift.annotation.Nullable
    public Modes getMode() {
      return this.mode;
    }

    /**
     * 
     * @see Modes
     */
    public answerPreGit_args setMode(@org.apache.thrift.annotation.Nullable Modes mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    /**
     * 
     * @see Modes
     */
    @org.apache.thrift.annotation.Nullable
    public Modes getCommand() {
      return this.command;
    }

    /**
     * 
     * @see Modes
     */
    public answerPreGit_args setCommand(@org.apache.thrift.annotation.Nullable Modes command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REPO_NAME:
        if (value == null) {
          unsetRepoName();
        } else {
          setRepoName((java.lang.String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Modes)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((Modes)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_NAME:
        return getRepoName();

      case USER_NAME:
        return getUserName();

      case MODE:
        return getMode();

      case COMMAND:
        return getCommand();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REPO_NAME:
        return isSetRepoName();
      case USER_NAME:
        return isSetUserName();
      case MODE:
        return isSetMode();
      case COMMAND:
        return isSetCommand();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerPreGit_args)
        return this.equals((answerPreGit_args)that);
      return false;
    }

    public boolean equals(answerPreGit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRepoName()) ? 131071 : 524287);
      if (isSetRepoName())
        hashCode = hashCode * 8191 + repoName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
      if (isSetMode())
        hashCode = hashCode * 8191 + mode.getValue();

      hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
      if (isSetCommand())
        hashCode = hashCode * 8191 + command.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(answerPreGit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRepoName()).compareTo(other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerPreGit_args(");
      boolean first = true;

      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerPreGit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPreGit_argsStandardScheme getScheme() {
        return new answerPreGit_argsStandardScheme();
      }
    }

    private static class answerPreGit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerPreGit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerPreGit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoName = iprot.readString();
                struct.setRepoNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.command = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerPreGit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoName != null) {
          oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
          oprot.writeString(struct.repoName);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeI32(struct.command.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerPreGit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPreGit_argsTupleScheme getScheme() {
        return new answerPreGit_argsTupleScheme();
      }
    }

    private static class answerPreGit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerPreGit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerPreGit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRepoName()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        if (struct.isSetCommand()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRepoName()) {
          oprot.writeString(struct.repoName);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
        if (struct.isSetCommand()) {
          oprot.writeI32(struct.command.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerPreGit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.repoName = iprot.readString();
          struct.setRepoNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.command = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
          struct.setCommandIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerPreGit_result implements org.apache.thrift.TBase<answerPreGit_result, answerPreGit_result._Fields>, java.io.Serializable, Cloneable, Comparable<answerPreGit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerPreGit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerPreGit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerPreGit_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ServerResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerPreGit_result.class, metaDataMap);
    }

    public answerPreGit_result() {
    }

    public answerPreGit_result(
      ServerResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerPreGit_result(answerPreGit_result other) {
      if (other.isSetSuccess()) {
        this.success = new ServerResponse(other.success);
      }
    }

    public answerPreGit_result deepCopy() {
      return new answerPreGit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ServerResponse getSuccess() {
      return this.success;
    }

    public answerPreGit_result setSuccess(@org.apache.thrift.annotation.Nullable ServerResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ServerResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerPreGit_result)
        return this.equals((answerPreGit_result)that);
      return false;
    }

    public boolean equals(answerPreGit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerPreGit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerPreGit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerPreGit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPreGit_resultStandardScheme getScheme() {
        return new answerPreGit_resultStandardScheme();
      }
    }

    private static class answerPreGit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerPreGit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerPreGit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ServerResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerPreGit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerPreGit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPreGit_resultTupleScheme getScheme() {
        return new answerPreGit_resultTupleScheme();
      }
    }

    private static class answerPreGit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerPreGit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerPreGit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerPreGit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ServerResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerAccess2_args implements org.apache.thrift.TBase<answerAccess2_args, answerAccess2_args._Fields>, java.io.Serializable, Cloneable, Comparable<answerAccess2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerAccess2_args");

    private static final org.apache.thrift.protocol.TField REPO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repoName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OLD_COMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldCommit", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField NEW_COMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("newCommit", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerAccess2_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerAccess2_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String repoName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
    /**
     * 
     * @see Modes
     */
    public @org.apache.thrift.annotation.Nullable Modes mode; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String ref; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String result; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String oldCommit; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String newCommit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_NAME((short)1, "repoName"),
      USER_NAME((short)2, "userName"),
      /**
       * 
       * @see Modes
       */
      MODE((short)3, "mode"),
      REF((short)4, "ref"),
      RESULT((short)5, "result"),
      OLD_COMMIT((short)6, "oldCommit"),
      NEW_COMMIT((short)7, "newCommit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_NAME
            return REPO_NAME;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // MODE
            return MODE;
          case 4: // REF
            return REF;
          case 5: // RESULT
            return RESULT;
          case 6: // OLD_COMMIT
            return OLD_COMMIT;
          case 7: // NEW_COMMIT
            return NEW_COMMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_NAME, new org.apache.thrift.meta_data.FieldMetaData("repoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Modes.class)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_COMMIT, new org.apache.thrift.meta_data.FieldMetaData("oldCommit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_COMMIT, new org.apache.thrift.meta_data.FieldMetaData("newCommit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerAccess2_args.class, metaDataMap);
    }

    public answerAccess2_args() {
    }

    public answerAccess2_args(
      java.lang.String repoName,
      java.lang.String userName,
      Modes mode,
      java.lang.String ref,
      java.lang.String result,
      java.lang.String oldCommit,
      java.lang.String newCommit)
    {
      this();
      this.repoName = repoName;
      this.userName = userName;
      this.mode = mode;
      this.ref = ref;
      this.result = result;
      this.oldCommit = oldCommit;
      this.newCommit = newCommit;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerAccess2_args(answerAccess2_args other) {
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetResult()) {
        this.result = other.result;
      }
      if (other.isSetOldCommit()) {
        this.oldCommit = other.oldCommit;
      }
      if (other.isSetNewCommit()) {
        this.newCommit = other.newCommit;
      }
    }

    public answerAccess2_args deepCopy() {
      return new answerAccess2_args(this);
    }

    @Override
    public void clear() {
      this.repoName = null;
      this.userName = null;
      this.mode = null;
      this.ref = null;
      this.result = null;
      this.oldCommit = null;
      this.newCommit = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRepoName() {
      return this.repoName;
    }

    public answerAccess2_args setRepoName(@org.apache.thrift.annotation.Nullable java.lang.String repoName) {
      this.repoName = repoName;
      return this;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserName() {
      return this.userName;
    }

    public answerAccess2_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    /**
     * 
     * @see Modes
     */
    @org.apache.thrift.annotation.Nullable
    public Modes getMode() {
      return this.mode;
    }

    /**
     * 
     * @see Modes
     */
    public answerAccess2_args setMode(@org.apache.thrift.annotation.Nullable Modes mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRef() {
      return this.ref;
    }

    public answerAccess2_args setRef(@org.apache.thrift.annotation.Nullable java.lang.String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getResult() {
      return this.result;
    }

    public answerAccess2_args setResult(@org.apache.thrift.annotation.Nullable java.lang.String result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOldCommit() {
      return this.oldCommit;
    }

    public answerAccess2_args setOldCommit(@org.apache.thrift.annotation.Nullable java.lang.String oldCommit) {
      this.oldCommit = oldCommit;
      return this;
    }

    public void unsetOldCommit() {
      this.oldCommit = null;
    }

    /** Returns true if field oldCommit is set (has been assigned a value) and false otherwise */
    public boolean isSetOldCommit() {
      return this.oldCommit != null;
    }

    public void setOldCommitIsSet(boolean value) {
      if (!value) {
        this.oldCommit = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNewCommit() {
      return this.newCommit;
    }

    public answerAccess2_args setNewCommit(@org.apache.thrift.annotation.Nullable java.lang.String newCommit) {
      this.newCommit = newCommit;
      return this;
    }

    public void unsetNewCommit() {
      this.newCommit = null;
    }

    /** Returns true if field newCommit is set (has been assigned a value) and false otherwise */
    public boolean isSetNewCommit() {
      return this.newCommit != null;
    }

    public void setNewCommitIsSet(boolean value) {
      if (!value) {
        this.newCommit = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REPO_NAME:
        if (value == null) {
          unsetRepoName();
        } else {
          setRepoName((java.lang.String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Modes)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((java.lang.String)value);
        }
        break;

      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((java.lang.String)value);
        }
        break;

      case OLD_COMMIT:
        if (value == null) {
          unsetOldCommit();
        } else {
          setOldCommit((java.lang.String)value);
        }
        break;

      case NEW_COMMIT:
        if (value == null) {
          unsetNewCommit();
        } else {
          setNewCommit((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_NAME:
        return getRepoName();

      case USER_NAME:
        return getUserName();

      case MODE:
        return getMode();

      case REF:
        return getRef();

      case RESULT:
        return getResult();

      case OLD_COMMIT:
        return getOldCommit();

      case NEW_COMMIT:
        return getNewCommit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REPO_NAME:
        return isSetRepoName();
      case USER_NAME:
        return isSetUserName();
      case MODE:
        return isSetMode();
      case REF:
        return isSetRef();
      case RESULT:
        return isSetResult();
      case OLD_COMMIT:
        return isSetOldCommit();
      case NEW_COMMIT:
        return isSetNewCommit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerAccess2_args)
        return this.equals((answerAccess2_args)that);
      return false;
    }

    public boolean equals(answerAccess2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      boolean this_present_oldCommit = true && this.isSetOldCommit();
      boolean that_present_oldCommit = true && that.isSetOldCommit();
      if (this_present_oldCommit || that_present_oldCommit) {
        if (!(this_present_oldCommit && that_present_oldCommit))
          return false;
        if (!this.oldCommit.equals(that.oldCommit))
          return false;
      }

      boolean this_present_newCommit = true && this.isSetNewCommit();
      boolean that_present_newCommit = true && that.isSetNewCommit();
      if (this_present_newCommit || that_present_newCommit) {
        if (!(this_present_newCommit && that_present_newCommit))
          return false;
        if (!this.newCommit.equals(that.newCommit))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRepoName()) ? 131071 : 524287);
      if (isSetRepoName())
        hashCode = hashCode * 8191 + repoName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
      if (isSetMode())
        hashCode = hashCode * 8191 + mode.getValue();

      hashCode = hashCode * 8191 + ((isSetRef()) ? 131071 : 524287);
      if (isSetRef())
        hashCode = hashCode * 8191 + ref.hashCode();

      hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
      if (isSetResult())
        hashCode = hashCode * 8191 + result.hashCode();

      hashCode = hashCode * 8191 + ((isSetOldCommit()) ? 131071 : 524287);
      if (isSetOldCommit())
        hashCode = hashCode * 8191 + oldCommit.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewCommit()) ? 131071 : 524287);
      if (isSetNewCommit())
        hashCode = hashCode * 8191 + newCommit.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerAccess2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRepoName()).compareTo(other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOldCommit()).compareTo(other.isSetOldCommit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldCommit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldCommit, other.oldCommit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewCommit()).compareTo(other.isSetNewCommit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewCommit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newCommit, other.newCommit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerAccess2_args(");
      boolean first = true;

      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldCommit:");
      if (this.oldCommit == null) {
        sb.append("null");
      } else {
        sb.append(this.oldCommit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newCommit:");
      if (this.newCommit == null) {
        sb.append("null");
      } else {
        sb.append(this.newCommit);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerAccess2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess2_argsStandardScheme getScheme() {
        return new answerAccess2_argsStandardScheme();
      }
    }

    private static class answerAccess2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerAccess2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerAccess2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoName = iprot.readString();
                struct.setRepoNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.result = iprot.readString();
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OLD_COMMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldCommit = iprot.readString();
                struct.setOldCommitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // NEW_COMMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newCommit = iprot.readString();
                struct.setNewCommitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerAccess2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoName != null) {
          oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
          oprot.writeString(struct.repoName);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
        if (struct.oldCommit != null) {
          oprot.writeFieldBegin(OLD_COMMIT_FIELD_DESC);
          oprot.writeString(struct.oldCommit);
          oprot.writeFieldEnd();
        }
        if (struct.newCommit != null) {
          oprot.writeFieldBegin(NEW_COMMIT_FIELD_DESC);
          oprot.writeString(struct.newCommit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerAccess2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess2_argsTupleScheme getScheme() {
        return new answerAccess2_argsTupleScheme();
      }
    }

    private static class answerAccess2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerAccess2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerAccess2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRepoName()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        if (struct.isSetRef()) {
          optionals.set(3);
        }
        if (struct.isSetResult()) {
          optionals.set(4);
        }
        if (struct.isSetOldCommit()) {
          optionals.set(5);
        }
        if (struct.isSetNewCommit()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetRepoName()) {
          oprot.writeString(struct.repoName);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
        if (struct.isSetResult()) {
          oprot.writeString(struct.result);
        }
        if (struct.isSetOldCommit()) {
          oprot.writeString(struct.oldCommit);
        }
        if (struct.isSetNewCommit()) {
          oprot.writeString(struct.newCommit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerAccess2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.repoName = iprot.readString();
          struct.setRepoNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
        if (incoming.get(4)) {
          struct.result = iprot.readString();
          struct.setResultIsSet(true);
        }
        if (incoming.get(5)) {
          struct.oldCommit = iprot.readString();
          struct.setOldCommitIsSet(true);
        }
        if (incoming.get(6)) {
          struct.newCommit = iprot.readString();
          struct.setNewCommitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerAccess2_result implements org.apache.thrift.TBase<answerAccess2_result, answerAccess2_result._Fields>, java.io.Serializable, Cloneable, Comparable<answerAccess2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerAccess2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerAccess2_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerAccess2_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ServerResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerAccess2_result.class, metaDataMap);
    }

    public answerAccess2_result() {
    }

    public answerAccess2_result(
      ServerResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerAccess2_result(answerAccess2_result other) {
      if (other.isSetSuccess()) {
        this.success = new ServerResponse(other.success);
      }
    }

    public answerAccess2_result deepCopy() {
      return new answerAccess2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ServerResponse getSuccess() {
      return this.success;
    }

    public answerAccess2_result setSuccess(@org.apache.thrift.annotation.Nullable ServerResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ServerResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerAccess2_result)
        return this.equals((answerAccess2_result)that);
      return false;
    }

    public boolean equals(answerAccess2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerAccess2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerAccess2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerAccess2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess2_resultStandardScheme getScheme() {
        return new answerAccess2_resultStandardScheme();
      }
    }

    private static class answerAccess2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerAccess2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerAccess2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ServerResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerAccess2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerAccess2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerAccess2_resultTupleScheme getScheme() {
        return new answerAccess2_resultTupleScheme();
      }
    }

    private static class answerAccess2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerAccess2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerAccess2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerAccess2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ServerResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerPostGit_args implements org.apache.thrift.TBase<answerPostGit_args, answerPostGit_args._Fields>, java.io.Serializable, Cloneable, Comparable<answerPostGit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerPostGit_args");

    private static final org.apache.thrift.protocol.TField REPO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repoName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerPostGit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerPostGit_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String repoName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
    /**
     * 
     * @see Modes
     */
    public @org.apache.thrift.annotation.Nullable Modes mode; // required
    /**
     * 
     * @see Modes
     */
    public @org.apache.thrift.annotation.Nullable Modes command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_NAME((short)1, "repoName"),
      USER_NAME((short)2, "userName"),
      /**
       * 
       * @see Modes
       */
      MODE((short)3, "mode"),
      /**
       * 
       * @see Modes
       */
      COMMAND((short)4, "command");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_NAME
            return REPO_NAME;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // MODE
            return MODE;
          case 4: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_NAME, new org.apache.thrift.meta_data.FieldMetaData("repoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Modes.class)));
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Modes.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerPostGit_args.class, metaDataMap);
    }

    public answerPostGit_args() {
    }

    public answerPostGit_args(
      java.lang.String repoName,
      java.lang.String userName,
      Modes mode,
      Modes command)
    {
      this();
      this.repoName = repoName;
      this.userName = userName;
      this.mode = mode;
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerPostGit_args(answerPostGit_args other) {
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public answerPostGit_args deepCopy() {
      return new answerPostGit_args(this);
    }

    @Override
    public void clear() {
      this.repoName = null;
      this.userName = null;
      this.mode = null;
      this.command = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRepoName() {
      return this.repoName;
    }

    public answerPostGit_args setRepoName(@org.apache.thrift.annotation.Nullable java.lang.String repoName) {
      this.repoName = repoName;
      return this;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserName() {
      return this.userName;
    }

    public answerPostGit_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    /**
     * 
     * @see Modes
     */
    @org.apache.thrift.annotation.Nullable
    public Modes getMode() {
      return this.mode;
    }

    /**
     * 
     * @see Modes
     */
    public answerPostGit_args setMode(@org.apache.thrift.annotation.Nullable Modes mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    /**
     * 
     * @see Modes
     */
    @org.apache.thrift.annotation.Nullable
    public Modes getCommand() {
      return this.command;
    }

    /**
     * 
     * @see Modes
     */
    public answerPostGit_args setCommand(@org.apache.thrift.annotation.Nullable Modes command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REPO_NAME:
        if (value == null) {
          unsetRepoName();
        } else {
          setRepoName((java.lang.String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Modes)value);
        }
        break;

      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((Modes)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_NAME:
        return getRepoName();

      case USER_NAME:
        return getUserName();

      case MODE:
        return getMode();

      case COMMAND:
        return getCommand();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REPO_NAME:
        return isSetRepoName();
      case USER_NAME:
        return isSetUserName();
      case MODE:
        return isSetMode();
      case COMMAND:
        return isSetCommand();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerPostGit_args)
        return this.equals((answerPostGit_args)that);
      return false;
    }

    public boolean equals(answerPostGit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRepoName()) ? 131071 : 524287);
      if (isSetRepoName())
        hashCode = hashCode * 8191 + repoName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
      if (isSetMode())
        hashCode = hashCode * 8191 + mode.getValue();

      hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
      if (isSetCommand())
        hashCode = hashCode * 8191 + command.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(answerPostGit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRepoName()).compareTo(other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerPostGit_args(");
      boolean first = true;

      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerPostGit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPostGit_argsStandardScheme getScheme() {
        return new answerPostGit_argsStandardScheme();
      }
    }

    private static class answerPostGit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerPostGit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerPostGit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoName = iprot.readString();
                struct.setRepoNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.command = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerPostGit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoName != null) {
          oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
          oprot.writeString(struct.repoName);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeI32(struct.command.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerPostGit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPostGit_argsTupleScheme getScheme() {
        return new answerPostGit_argsTupleScheme();
      }
    }

    private static class answerPostGit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerPostGit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerPostGit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRepoName()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        if (struct.isSetCommand()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRepoName()) {
          oprot.writeString(struct.repoName);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
        if (struct.isSetCommand()) {
          oprot.writeI32(struct.command.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerPostGit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.repoName = iprot.readString();
          struct.setRepoNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.command = hu.bme.mit.gitlens.Modes.findByValue(iprot.readI32());
          struct.setCommandIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerPostGit_result implements org.apache.thrift.TBase<answerPostGit_result, answerPostGit_result._Fields>, java.io.Serializable, Cloneable, Comparable<answerPostGit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerPostGit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerPostGit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerPostGit_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ServerResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerPostGit_result.class, metaDataMap);
    }

    public answerPostGit_result() {
    }

    public answerPostGit_result(
      ServerResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerPostGit_result(answerPostGit_result other) {
      if (other.isSetSuccess()) {
        this.success = new ServerResponse(other.success);
      }
    }

    public answerPostGit_result deepCopy() {
      return new answerPostGit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ServerResponse getSuccess() {
      return this.success;
    }

    public answerPostGit_result setSuccess(@org.apache.thrift.annotation.Nullable ServerResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ServerResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof answerPostGit_result)
        return this.equals((answerPostGit_result)that);
      return false;
    }

    public boolean equals(answerPostGit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerPostGit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerPostGit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerPostGit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPostGit_resultStandardScheme getScheme() {
        return new answerPostGit_resultStandardScheme();
      }
    }

    private static class answerPostGit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerPostGit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerPostGit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ServerResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerPostGit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerPostGit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerPostGit_resultTupleScheme getScheme() {
        return new answerPostGit_resultTupleScheme();
      }
    }

    private static class answerPostGit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerPostGit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerPostGit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerPostGit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ServerResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

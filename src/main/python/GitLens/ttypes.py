#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Modes(object):
    R = 0
    W = 1
    plus = 2
    C = 3
    D = 4
    WM = 5
    plusM = 6
    CM = 7
    DM = 8
    GIT_RECIEVE_PACK = 9
    GIT_UPLOAD_PACK = 10
    GIT_UPLOAD_ARCHIVE = 11

    _VALUES_TO_NAMES = {
        0: "R",
        1: "W",
        2: "plus",
        3: "C",
        4: "D",
        5: "WM",
        6: "plusM",
        7: "CM",
        8: "DM",
        9: "GIT_RECIEVE_PACK",
        10: "GIT_UPLOAD_PACK",
        11: "GIT_UPLOAD_ARCHIVE",
    }

    _NAMES_TO_VALUES = {
        "R": 0,
        "W": 1,
        "plus": 2,
        "C": 3,
        "D": 4,
        "WM": 5,
        "plusM": 6,
        "CM": 7,
        "DM": 8,
        "GIT_RECIEVE_PACK": 9,
        "GIT_UPLOAD_PACK": 10,
        "GIT_UPLOAD_ARCHIVE": 11,
    }


class ServerResponse(object):
    """
    Attributes:
     - Response
     - ReturnValue

    """


    def __init__(self, Response=None, ReturnValue=None,):
        self.Response = Response
        self.ReturnValue = ReturnValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Response = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ReturnValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerResponse')
        if self.Response is not None:
            oprot.writeFieldBegin('Response', TType.STRING, 1)
            oprot.writeString(self.Response.encode('utf-8') if sys.version_info[0] == 2 else self.Response)
            oprot.writeFieldEnd()
        if self.ReturnValue is not None:
            oprot.writeFieldBegin('ReturnValue', TType.I64, 2)
            oprot.writeI64(self.ReturnValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ServerResponse)
ServerResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Response', 'UTF8', None, ),  # 1
    (2, TType.I64, 'ReturnValue', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
